howto run in netns:
    - sh /root/work/raw_ipsec/set_ns.sh
    - sh slbroute/build.sh
    - sh slbroute/do_load.sh
    - run your program somewhere
        - build:
            - sh slbroute/build.sh
            - sh build.sh
        - server: 
            /opt/cmd.sh lb11 ./lb -laddr 172.16.1.51 -raddr 172.16.1.11,172.16.1.12 -vout 172.16.1.50 -vin 192.168.108.50
        - client
            /opt/cmd.sh swan11 ./lb -sub -laddr 172.16.1.11 -raddr 172.16.1.51 -subout tunnel11_in -subin end11_in
        - ccode:
            - sh run.sh l 0x1 108 109 0 # add local to remote
            - sh run.sh r 0x2 109 108 0 # add remote to local

    - how to delete
        - sh slbroute/do_unload.sh
        - sh /root/work/raw_ipsec/del_ns.sh
next:
    - (done) finish xdp module, use from bootstrap 's code
    - use rawipsec's config to do test
    - [ also do a xdp redirect test ]
    - embed ccode in strongswan, each time new child sa create, we create a dial sock for it
    
# bugs: still have bug of ver sync, if some one failed during hb or just after sync success, what to do?
# may merge topo and cfg change together

#https://stackoverflow.com/questions/43579838/relationship-between-a-package-statement-and-the-directory-of-a-go-file
# import path is dirname, but when call func, we use package name, we can make less confuse by match dirname and package name
#server: go run hb_sync.go slb.pb.go -laddr 192.168.122.173 -raddr 192.168.122.173 -hbtmo 1000
#subnet: go run hb_sync.go slb.pb.go -sub -laddr 192.168.122.173 -raddr 192.168.122.173

#C side: cd ccode; ./main_c  tcp://192.168.122.173:22347
C side: cd ccode; sh run.sh $from $to [ delete ]
server: go run hb_sync.go -laddr 192.168.122.173 -raddr 192.168.122.173 -vin 192.168.122.173 -vout 192.168.122.173 -hbtmo 1000
client: go run hb_sync.go -sub -laddr 192.168.122.173 -raddr 192.168.122.173
